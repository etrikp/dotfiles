{"mode":"editor","version":1,"windowDimensions":{"x":236,"y":40,"width":1824,"height":1095,"maximized":false},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/etrikp/git/cis","buffers":[{"text":"#!/usr/bin/python\n\n# Workflow is\n# 1. Checkout from Gerrit\n# 2. Checkout from GitLab\n#\nimport requests, json\nimport subprocess\nimport os\nimport argparse\nimport sys\n\nfrom dateutil.parser import parse\nfrom requests.auth import HTTPDigestAuth\nfrom urlparse import urljoin\nfrom shutil import rmtree\n\n\ngerrit_endpoint = \"http://cis-gerrit.cisco.com/\"\nproject_url = \"a/projects/\"\nfetch_url = \"ssh://epatrice@cis-gerrit.cisco.com:29418/{0}\"\n\ngitlab_token = \"eUxKKy3pF3LvuSCYeCB1\"\ngitlab_endpoint = \"https://nc-devops-tools-1.cisco.com\"\ngitlab_api_version = '/api/v3'\ngitlab_ssh_url = \"git@nc-devops-tools-1.cisco.com:continuous-integration/{0}.git\"\n\nbase_working_dir = './repos'\n\nenv = {}\nenv.update(os.environ)\nenv['PATH'] = \"{0}:{1}\".format(env['PATH'],\"/usr/bin:/usr/local/bin\")\n\n\ndef working_dir(directory):\n  def inner(func):\n    def outer(*args, **kwargs):\n      cwd = os.getcwd()\n      os.chdir(base_working_dir + directory)\n      output = func(*args, **kwargs)\n      os.chdir(cwd)\n\n      return output\n    return outer\n  return inner\n\n\ndef get_gerrit():\n  response = requests.get(\"{0}{1}\".format(gerrit_endpoint, project_url), auth=HTTPDigestAuth('epatrice', 'u10rj/kyI/CX'))\n\n  # For some reason )]}' is magic to prevent XSS of some sort.. eh?\n  response._content = response._content.replace(\")]}'\", '')\n  projects = response.json()\n  # project_keys = filter(lambda p: p.startswith('puppet') or p.startswith('profile'), [prj for prj in projects])\n\n  repos = set()\n\n  for project in projects:\n    repos.add(project)\n\n  return repos\n\ndef get_gitlab():\n  headers = {'PRIVATE-TOKEN': gitlab_token}\n  repos = set()\n  ssh_url_map = {}\n  id_map = {}\n\n  for page in xrange(1,4):\n    gitlab_api_resource = \"/projects?page={0}&per_page=100\".format(page)\n    url = urljoin(gitlab_endpoint, gitlab_api_version + gitlab_api_resource)\n\n    response = requests.get(url, headers=headers)\n    projects = response.json()\n\n    for project in projects:\n        if project['namespace']['path'] == 'epatrice':\n            continue\n        repos.add(project['path'])\n        ssh_url_map[project['path']] = project['ssh_url_to_repo']\n        id_map[project['path']] = project['id']\n\n  return repos, ssh_url_map, id_map\n\n\ndef get_gitlab_branches(repo_id):\n  headers = {'PRIVATE-TOKEN': gitlab_token}\n  url = urljoin(gitlab_endpoint, \"{0}/projects/{1}/repository/branches\".format(gitlab_api_version, repo_id))\n  response = requests.get(url, headers=headers)\n  return response.json()\n\n\ndef delete_gitlab_project(repo_id):\n  headers = {'PRIVATE-TOKEN': gitlab_token}\n  if not repo_id:\n    raise AttributeError\n  url = urljoin(gitlab_endpoint, \"{0}/projects/{1}\".format(gitlab_api_version, repo_id))\n  response = requests.delete(url, headers=headers)\n  return response.json()\n\n\ndef clean():\n  if os.path.exists(base_working_dir):\n    rmtree(base_working_dir)\n\n  os.makedirs(base_working_dir + \"/gerrit\")\n  os.makedirs(base_working_dir + \"/gitlab\")\n\n\ndef checkout(url):\n    return subprocess.check_output(\"/opt/local/bin/git clone {0}\".format(url), env=env, shell=True)\n\n\ndef git_branches():\n    return subprocess.check_output('/opt/local/bin/git  -1 --format=format:%aD', env=env, shell=True)\n\n\ndef git_log():\n    return subprocess.check_output('/opt/local/bin/git log -1 --format=format:%aD', env=env, shell=True)\n\n\n@working_dir('/gerrit')\ndef gerrit_log_date(repo):\n    os.chdir(repo)\n    return git_log()\n\n\n@working_dir('/gitlab')\ndef gitlab_log_date(repo):\n    os.chdir(repo)\n    return git_log()\n\n\n@working_dir('/gitlab')\ndef checkout_gitlab(url):\n    checkout(url)\n\n\n@working_dir('/gerrit')\ndef checkout_gerrit(url):\n    checkout(url)\n\n\ndef main():\n\n  parser = argparse.ArgumentParser(description='Script to do things')\n  parser.add_argument(\"--delete\", default=False, type=bool)\n  parser.add_argument(\"--noop\", default=False, type=bool)\n  parser.add_argument(\"--branches\", default=False, type=bool)\n  parser.add_argument(\"--delete-gitlab\", default=False, type=bool)\n\n  args = parser.parse_args()\n\n  gerrit_repos = get_gerrit()\n  gitlab_repos, gitlab_urls, gitlab_ids = get_gitlab()\n\n  common_repos = gerrit_repos & gitlab_repos\n  only_gerrit = gerrit_repos - gitlab_repos\n  only_gitlab = gitlab_repos - gerrit_repos\n\n  print \"Total repos in Gerrit: {0}\".format(len(gerrit_repos))\n  print \"Total repos in GitLab: {0}\".format(len(gitlab_repos))\n  print \"Number of repos in both gerrit and gitlab: {0}\".format(len(common_repos))\n\n  gitlab_repos_to_remove = []\n  newer_in_gerrit = []\n  newer_in_gitlab = []\n\n  clean()\n\n  for repo in gerrit_repos:\n    checkout_gerrit(fetch_url.format(repo))\n\n  sys.exit(1)\n\n  for repo in common_repos:\n\n    if args.branches is True:\n      branches = get_gitlab_branches(gitlab_ids[repo])\n\n      for branch in branches:\n        if branch['name'] == 'master':\n          continue\n\n        if args.noop is not True:\n          checkout_gitlab(gitlab_urls[repo])\n          gitlab_last_modified = parse(gitlab_log_date(repo))\n          branch_com = parse(branch['commit']['committed_date'])\n\n          print \"{1} {2} {0}\".format(branch['name'], branch_com, repo)\n\n        if branch_com > gitlab_last_modified:\n          print 'BRANCH IS NEWER'\n\n      sys.exit(1)\n\n    if args.noop is not True:\n      clean()\n\n      checkout_gitlab(gitlab_urls[repo])\n      gitlab_last_modified = parse(gitlab_log_date(repo))\n\n      checkout_gerrit(fetch_url.format(repo))\n      gerrit_last_modified = parse(gerrit_log_date(repo))\n\n      if gerrit_last_modified == gitlab_last_modified:\n        gitlab_repos_to_remove.append(repo)\n        print \"-- Last modified time is the same..\"\n      elif gerrit_last_modified > gitlab_last_modified:\n        gitlab_repos_to_remove.append(repo)\n        newer_in_gerrit.append(repo)\n        print \"-- Gerrit repo has the most recent changes\"\n      else:\n        newer_in_gitlab.append(repo)\n        print \"-- GitLab repo has the most recent changes\"\n\n\n\n  print \"\\tGitLab only: {0}\".format(len(only_gitlab))\n  print \"\\tGerrit only: {0}\".format(len(only_gerrit))\n\n  print newer_in_gitlab\n  print newer_in_gerrit\n\n  for repo in sorted(gitlab_repos_to_remove):\n    print gitlab_urls[repo]\n\n    if args.delete is True:\n        print \"DELETE %s\" % repo\n        delete_gitlab_project(gitlab_ids[repo])\n\n\n\nif __name__ == \"__main__\":\n  main()","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":8},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/etrikp/git/cis/get_projects.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e5be84fc7c50b97a0fac1039e44bc0d5900a1a16","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"editorWidthInChars":null,"scrollTop":88,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/etrikp/git/cis/get_projects.py","tabLength":2,"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"TokenizedBuffer"},"invisibles":{"eol":"¬","space":"·","tab":"»","cr":"¤"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/etrikp/git/cis/get_projects.py","focused":true,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-python","language-sql","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/etrikp/git/cis/get_projects.py":1410979944320},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":9478948},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/etrikp/git/cis/get_projects.py","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}